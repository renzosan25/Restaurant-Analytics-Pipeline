x-superset-user: &superset-user root
x-superset-volumes: &superset-volumes
#   # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
#   # - ./superset:/app/superset
  - ./docker/superset_config.py:/app/pythonpath/superset_config.py


services:
  db:
    container_name: postgres_container
    image: postgres:16.9-bullseye
    # 5432 is the port that docker uses
    ports:
      - 5000:5432
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: db_password
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/airflow_init.sql:/docker-entrypoint-initdb.d/airflow_init.sql
      - ./postgres/superset_init.sql:/docker-entrypoint-initdb.d/superset_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U db_user -d db"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s
    
    networks: 
      - my-network

  
  af:
    container_name: airflow_container
    build:
      context: .
      dockerfile: Dockerfile
    image: airflow-custom
    ports:
      - 8002:8080
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db:5432/airflow_db
      PYTHONPATH: /opt/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./api_call:/opt/airflow/api_call
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kepler_results:/opt/airflow/exports
    group_add:
      - '1001'
    depends_on:
      - db
    networks:
      - my-network
    command: >
      bash -c "airflow db migrate && airflow standalone"
  
  # dbt:
  #   container_name: dbt_container
  #   build:
  #     context: ./dbt
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./dbt/my_project:/usr/app
  #     - ./dbt:/root/.dbt
  #   working_dir: /usr/app
  #   depends_on:
  #     - db
  #   networks:
  #     - my-network
  #   environment:
  #     DB_HOST: db
  #     DB_PORT: 5432 

   # command init [project_name]
    # command debug
    # command run 

  superset:
    env_file:
      - path: docker/.env # default
        required: true
    image: apache/superset:3.0.0-py310
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: unless-stopped
    ports:
      - 8088:8088
    user: *superset-user
    depends_on:
      superset-init:
        condition: service_completed_successfully
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
      DATABASE_DB: "superset_db"
    volumes: *superset-volumes
    networks:
      - my-network

  superset-init:
    image: superset-custom
    build:
      context: ./docker
      dockerfile: Dockerfile
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: docker/.env # default
        required: true
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    user: *superset-user
    volumes: *superset-volumes
    environment:
      SUPERSET_LOAD_EXAMPLES: "no"
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
      DATABASE_DB: "superset_db"
      DB_HOST: db
      DB_PORT: 5432
    healthcheck:
      disable: true
    networks:
      - my-network

  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/data
    networks:
      - my-network



networks:
  my-network:
    name: my-network
    driver: bridge

volumes:
  redis:
    external: false


